name: AI PR Review (GitHub Models)
on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        uses: cli/gh-action@v2

      - name: Fetch PR diff (unified patch)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr diff ${{ github.event.pull_request.number }} --patch > diff.patch
          wc -c diff.patch

      - name: Build prompt
        run: |
          cat > prompt.txt <<'TXT'
          You are a meticulous code reviewer for a React/Next.js reflections app. Given a unified diff from a pull request:
          
          1) **Security & Critical Issues**: Flag any high-severity problems (security vulnerabilities, auth bypasses, data loss risks, performance bottlenecks)
          2) **Code Quality**: Check for React best practices, proper error handling, accessibility concerns, and TypeScript usage
          3) **Architecture**: Evaluate component structure, state management, and API design patterns
          4) **Testing**: Suggest areas that need test coverage or improved testing
          5) **Improvements**: Provide specific, actionable suggestions with code examples when helpful
          
          Focus on the most impactful feedback. If you see obvious fixes, include small unified diff snippets.
          
          Output concise Markdown with clear headings, bullet points, and fenced code blocks for any suggested patches.
          TXT

      - name: Call GitHub Models (gpt-4o)
        id: model
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Send prompt + diff to GitHub Models API
          # Note: GitHub Models API endpoint may vary - adjust as needed for your org
          gh api -X POST "repos/${{ github.repository }}/models/runs" \
            -F model="gpt-4o" \
            -F input@"prompt.txt" \
            -F input@"diff.patch" > run.json || {
              echo "GitHub Models API call failed, creating fallback review"
              cat > review.md <<'FALLBACK'
          ## 🤖 AI Review Status
          
          The GitHub Models API is not available or configured for this repository. 
          
          **To enable AI reviews:**
          1. Ensure GitHub Models is available for your organization
          2. Or use the OpenAI fallback workflow instead
          3. Check repository permissions and API access
          
          **Manual review recommended** for this PR.
          FALLBACK
              exit 0
            }

          # Extract the model output
          cat run.json | jq -r '.output // .result // .content // empty' > review.md || {
            echo "Could not parse model response, using fallback"
            cat > review.md <<'FALLBACK'
          ## 🤖 AI Review
          
          Model response could not be parsed. Please review this PR manually.
          FALLBACK
          }
          
          # Ensure we have some content
          if [ ! -s review.md ]; then
            cat > review.md <<'FALLBACK'
          ## 🤖 AI Review
          
          No review content generated. The model may have encountered an issue processing this diff.
          Please review manually or check the Actions logs for details.
          FALLBACK
          fi

      - name: Comment on PR with AI review
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Add header with metadata
          cat > final_review.md <<'HEADER'
          ## 🤖 AI Code Review (GitHub Models)
          
          *Automated review powered by GitHub Models API*
          
          ---
          
          HEADER
          
          cat review.md >> final_review.md
          
          # Post the review comment
          gh pr comment ${{ github.event.pull_request.number }} --body-file final_review.md

